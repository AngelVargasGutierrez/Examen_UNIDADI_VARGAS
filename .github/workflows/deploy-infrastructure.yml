name: Deploy Infrastructure

on:
  push:
    branches: [ main, develop ]
    paths:
      - '*.tf'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '*.tf'
      - '.github/workflows/deploy-infrastructure.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_STORAGE }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=movies-analytics.tfstate"

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}" \
          -out=tfplan

    - name: Upload Plan
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: tfplan
        retention-days: 5

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_STORAGE }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=movies-analytics.tfstate"

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}" \
          -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: terraform-outputs
      run: |
        echo "sql_server_fqdn=$(terraform output -raw sql_server_fqdn)" >> $GITHUB_OUTPUT
        echo "database_name=$(terraform output -raw database_name)" >> $GITHUB_OUTPUT
        echo "storage_account_name=$(terraform output -raw storage_account_name)" >> $GITHUB_OUTPUT
        echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT

    - name: Update GitHub Environment Variables
      run: |
        echo "SQL_SERVER_FQDN=${{ steps.terraform-outputs.outputs.sql_server_fqdn }}" >> $GITHUB_ENV
        echo "DATABASE_NAME=${{ steps.terraform-outputs.outputs.database_name }}" >> $GITHUB_ENV
        echo "STORAGE_ACCOUNT_NAME=${{ steps.terraform-outputs.outputs.storage_account_name }}" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=${{ steps.terraform-outputs.outputs.resource_group_name }}" >> $GITHUB_ENV

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TERRAFORM_STATE_RG }}" \
          -backend-config="storage_account_name=${{ secrets.TERRAFORM_STATE_STORAGE }}" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=movies-analytics.tfstate"

    - name: Terraform Destroy
      run: |
        terraform destroy -auto-approve \
          -var="sql_admin_password=${{ secrets.SQL_ADMIN_PASSWORD }}"

  notify-teams:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [terraform-apply]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.terraform-apply.result == 'success'
      run: |
        curl -H "Content-Type: application/json" -d '{
          "text": "✅ Infrastructure deployment successful for Movies Analytics project",
          "sections": [{
            "activityTitle": "Terraform Apply Completed",
            "activitySubtitle": "All resources have been deployed successfully",
            "facts": [
              {"name": "Repository", "value": "${{ github.repository }}"},
              {"name": "Branch", "value": "${{ github.ref_name }}"},
              {"name": "Commit", "value": "${{ github.sha }}"},
              {"name": "Actor", "value": "${{ github.actor }}"}
            ]
          }]
        }' ${{ secrets.TEAMS_WEBHOOK_URL }}

    - name: Notify Failure
      if: needs.terraform-apply.result == 'failure'
      run: |
        curl -H "Content-Type: application/json" -d '{
          "text": "❌ Infrastructure deployment failed for Movies Analytics project",
          "sections": [{
            "activityTitle": "Terraform Apply Failed",
            "activitySubtitle": "Please check the logs for more details",
            "facts": [
              {"name": "Repository", "value": "${{ github.repository }}"},
              {"name": "Branch", "value": "${{ github.ref_name }}"},
              {"name": "Commit", "value": "${{ github.sha }}"},
              {"name": "Actor", "value": "${{ github.actor }}"}
            ]
          }]
        }' ${{ secrets.TEAMS_WEBHOOK_URL }}